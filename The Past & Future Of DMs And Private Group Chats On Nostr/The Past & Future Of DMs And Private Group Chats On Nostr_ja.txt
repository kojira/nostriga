[0.00 - 6.16]  これは少し興味深い話です。というのも、本来はDreadとの炉辺会議になる予定だったのですが、
[6.16 - 9.84]  Dreadが直前に来られなくなってしまったのです。
[9.84 - 17.06]  そこで、これを短いトークに変更し、直接メッセージとさまざまなグループメッセージの
[17.06 - 23.94]  過去の仕様についての非常に簡単な概要をお話しします。
[23.94 - 27.80]  これは、私が先週提案した新しい提案について深く掘り下げる話ではありません。
[27.80 - 29.24]  それは明日です。
[29.24 - 30.00]  他のステージで行いますが、これの最後に少しだけその話をします。
[30.00 - 34.22]  私はGeoffです。ここで私を見つけることができます。私は2023年の初めから
[34.22 - 41.14]  Nostrisの開発を行っており、幸運なことに最近はOpenStatsの助成金の支援を受けて
[41.14 - 46.88]  います。これは素晴らしいことです。私のインターネットメッセージングキャリアは、
[46.88 - 52.86]  1993年頃、Windows 3.1でAOLインスタントメッセンジャーを使い始めたことから始まりました。
[52.86 - 60.00]  同じような年代の人たちはICQやIRCなどの存在を認識していると思います。
[60.00 - 67.40]  これらはインターネット上にあった元々のチャットアプリのいくつかです。
[67.40 - 71.52]  正直なところ、チャットはおそらく初期のインターネットで
[71.52 - 76.32]  ノーマルな人々にとって最も早く製品市場にフィットしたものの一つだったと思います。
[76.32 - 81.28]  これはすぐに素晴らしいユースケースであることが明らかでした。
[81.28 - 84.24]  世界中の人々とリアルタイムで話すことができ、簡単でした。
[84.24 - 89.00]  しかし、それは単なる楽しいことではありませんでした。
[89.00 - 90.00]  私たち全員が知っているように、今では何百ものメッセンジャーが存在します。
[90.00 - 94.34]  私はこのリストにあるすべてのメッセンジャーを少なくとも少しは使ったことがあります。
[94.34 - 98.08]  いくつかはビジネスに特化しているものもあれば、
[98.08 - 99.08]  いくつかはよりソーシャルに特化しているものもあります。
[99.08 - 102.30]  しかし、すべてにはプライベートメッセージングの概念が組み込まれています。
[102.30 - 103.48]  これらのメッセンジャーは、楽しいことやゲームのためだけのものではありません。
[103.48 - 105.10]  アラブの春や、先月や今月のベネズエラで見たように、
[105.10 - 106.98]  これらは人々が実際に現実世界で何かを成し遂げるための力を与えるツールです。
[106.98 - 112.78]  それは以前にはできなかったことです。したがって、メッセンジャーは
[112.78 - 115.72]  社会的および楽しい側面から重要であるだけでなく、
[115.72 - 120.00]  社会の構造にとっても非常に重要です。
[120.00 - 125.66]  では、メッセンジャーを安全にするためには何が必要なのでしょうか？
[125.66 - 131.12]  良好なコミュニケーションを確保するためには、どのような特性が必要でしょうか？
[131.12 - 136.04]  セキュリティには二つの側面があります。一つはプライベートで、もう一つは機密です。
[136.04 - 144.80]  プライベートとは、観察者が何が起こっているのかを知ることができないことを意味します。
[144.80 - 149.96]  つまり、アリスとボブが会話していることや、どちらかがグループにいることを
[149.96 - 156.98]  知ることができません。これにはメタデータを保護する必要があります。
[156.98 - 161.36]  もう一つの側面は機密性です。これは、メッセージの実際の内容が
[161.40 - 165.56]  読むべきでない人には読めないことを意味します。
[165.56 - 171.02]  実際、さまざまなプロトコルやメッセンジャーの種類、NosterのNIPを調べ始めると
[171.02 - 176.82]  すべてがトレードオフであることがわかります。
[176.82 - 179.98]  これはエンジニアリング全般に言えることですが、特にこの点に関しては非常に顕著です。
[179.98 - 183.62]  何かを常に犠牲にしているのです。
そして、何を犠牲にして別の側面で得るのか、もっと意識しておくのが最良です。メッセンジャーを調べ始め、さまざまな暗号化の手法やその暗号化の側面について深く考えると、よく耳にするのが「フォワードセキュリティ」と「ポストコンプロマイズセキュリティ」と呼ばれるものです。これは基本的に、暗号化された会話の中で鍵が侵害された場合、過去のメッセージや未来のメッセージに何が起こるのかを問うものです。多くの場合、特に私たちがNostrで使用した最初の直接メッセージの手法の場合、鍵を失うとすべてを失いますよね？復元の方法はありません。フォワードセキュリティは、鍵を失った場合、過去のすべてがすぐに復号化可能になるのか、そうでないのかということです。もしそうなら、それはフォワードセキュリティを提供しない手法です。一方、ポストコンプロマイズセキュリティは、鍵を失った場合に、その侵害から回復し、異なる鍵や完全に新しい暗号化で先に進むことができるかどうかということです。そうすることで、同じアイデンティティの鍵を使って同じ会話を続けることができ、実際に暗号化された通信を維持できます。これらが主要な側面です。私たちにはプライバシーと機密性があり、時間の概念があり、鍵に何が起こるかに基づいてその機密性が時間とともにどう変化するかということです。理想的な世界では、トレードオフを考えなくても良い場合、私たちは何を望むのでしょうか？私たちは、プライベートで機密性のあるもの、フォワードセキュリティがあり、ポストコンプロマイズセキュリティがあり、直接の1対1のメッセージにも無限に大きなグループにも使えるもの、そしてメッセージを否認したり、実際に会話をしたことがなかったかのようにすることができる能力を望むでしょう。最後のポイントが実際には最も難しいものであり、それに取り組んだ非常に興味深いプロトコルがありますが、多くのプロトコルが比較的早く放棄しなければならないことだと思います。なぜなら、会話をしながらそれが決して起こらなかったかのように振る舞うのは本当に良い方法がないからです。では、Nostrの直接的な側面について見てみましょう。1対1のやり取りでは何が起こるのでしょうか？実は数時間前にベン・アークと話していて、彼が「バックストーリーを知ってる？」と言っていました。私たちは最初の頃、Twitterのクローンを作っていて、私はフィアット・ジェフにDMが欲しいと言い、DMが好きだと言ったら、彼はそれを嫌がっていました。フィアット・ジェフはすべてのことを嫌うからです。ベンはこれを作り、彼らは「これは特に安全である必要はない、私たちは20人しかいない」と考えたわけです。彼らはその時点では、このものが長期的に採用されることを考えていませんでした。ただ、メッセージの内容を暗号化して、リレーを介して送信する方法を考えていたのです。ですから、私たちが手に入れたものは、非常にシンプルな暗号化・復号化の手法です。内容は、私たちの2つの鍵のセットの間で計算される共有秘密を使用して暗号化されます。
つまり、私たち二人だけが、Nostraの鍵を持っていて、実際にこれらのメッセージを復号して読むことができるということです。会話はいつでも任意のクライアントに読み込むことができ、過去にさかのぼって全体の会話を再構築できます。なぜなら、私たちはまだその鍵を持っていて、全員が同じ鍵を使用しているからです。ご想像の通り、ここでのトレードオフは、これに関するすべてのメタデータが公開されていることです。皆さんもこれを見たことがあると思いますが、誰が誰といつ話しているかを報告するボットが存在します。これは明らかに良くありません。メタデータは、誰が誰と話しているのかを三角測量して理解するための重要な要素です。そのため、それが隠されていないのは良くありません。また、完全な前方秘匿性や事後妥協のセキュリティも全くありません。グループのどちらかの当事者が秘密鍵を失うと、会話は基本的に無効になってしまいます。なぜなら、攻撃者があなたの秘密鍵を持っていて、あなたの通信を監視しているかもしれないからです。実際に何かをする必要はなく、ただ秘密鍵を持っているだけで、あなたたちが何を言っているかを見て、鍵を持っていることを明らかにする必要はありません。暗号化スキームも少し単純で、非常にシンプルに作られており、いくつかの高レベルの攻撃に対する対策を欠いています。また、グループをサポートするための機能も何もありません。これがNIP-04でした。多くの人々はNIP-04を好ましく思っていませんでした。すぐに人々はそれを有害だと呼び始め、「これはひどい。誰も使うべきではない」と言っていました。私は、これには少し誇張されている部分もあると思います。実際には、これはハンマーのようなもので、問題を解決するために鈍い仕事をしますが、コンテンツを隠すことはでき、それに関してはまあまあの仕事をしました。しかし、約150件のコメントが続くそのスレッドは、NIP-04の作成に直接つながりました。これは他のNostra開発者の数人によって主導されましたが、主にNoble HashesやNoble Curvesの開発者であるポール・ミラーによって行われました。彼は非常に優れた暗号学者で、彼の知識は確かです。彼は、私たちが暗号化の種類をアップグレードできるように、極端な努力をしました。これはメタデータとは関係ありませんが、攻撃に対してより強靭な暗号化の種類にアップグレードされました。これがNIP-44が私たちにもたらしたものです。NIP-44は暗号化の特性を大幅に改善しました。計算、暗号化、復号化は非常にシンプルで、いつでも全会話の履歴を取得できます。また、正式に暗号的に監査されているので、かなり安全であることがわかります。しかし、これはDMの新しいスキームを設定するものではありませんし、メタデータを隠すものでもありません。どちらかの当事者の秘密鍵が漏れた場合、すべてを永遠に失ってしまいます。したがって、問題を解決するものではありません。ギフトラッピングは本当の暗号化ではありません。ギフトラッピングはメタデータを隠す方法であり、DMやグループチャットにだけ適用されるものではありませんが、主な使用ケースの一つです。
ギフトラッピングは基本的に、別のイベントでイベントを包み込むことによって良いメタデータ保護を提供し、誰が誰にメッセージを送っているのかを隠す手法です。そして、その包まれたイベントの内部イベントは署名されていないため、後で漏洩してリレーに公開されることはありません。なぜなら、それは実際には有効なイベントではないからです。この手法の問題は、クライアントに対してサービス拒否攻撃のリスクを開く可能性があることです。悪意のあるクライアントが多くのこのようなラップされたイベントを送信し始めると、クライアントはその最初のレイヤーが解かれるまで、それが関心のあるメッセージかどうかわからないのです。そして、その操作は若干高コストなため、これが大量に発生すると、クライアントはその負荷に耐えられなくなるかもしれません。

さて、これがギフトラッピングです。そして、これがどのように機能するかを簡単に説明すると、内部にあるイベントが実際に伝えたいこと、つまり関心のあることです。これは署名されていません。この内部のイベントは、最初のレイヤーであるシールで包まれます。その内容は噂です。噂は暗号化され、シールに組み込まれます。そして、それがさらにもう一つのレイヤーで包まれ、完全に一時的な別の鍵ペアと共に公開されます。外側のレイヤーで包まれると、誰がそのメッセージを送信しているのかはわかりません。それは、一度だけ生成されてすぐに捨てられる鍵のようなものです。このため、内部に何があるのか誰もわからず、誰がそのユーザーに対して送っているのか、誰からのものなのかもわかりません。これは非常に役立つもので、Nostr全体でさまざまなことに役立ちます。これは単なるダイレクトメッセージではありません。最近では、Nostrにおけるダイレクトメッセージの最先端は基本的にNIP44とNIP59の組み合わせです。新しい暗号化標準を取り入れ、ギフトラッピングを使用して、これらの難読化されたメタデータ、高度に暗号化されたイベントを作成します。これは素晴らしいことです。会話履歴全体を再構築することができます。この種のダイレクトメッセージを使用しているかどうかは誰にもわかりません。あなたともう一方が話していることも誰にもわかりません。ただし、前方秘匿性や後の妥協時のセキュリティはありません。1つの鍵が漏洩すれば、すべてが失われます。そしてもちろん、ギフトラッピングされているため、ギフトラッピングされたイベントの欠点もすべてあります。ここで一旦止めます。ダイレクトメッセージに関して特に質問がある方はいらっしゃいますか？いませんか？わかりました、続けます。

では、グループメッセージングについてです。ここでは少し異なる点があります。なぜなら、ダイレクトメッセージングはすべてプライベートメッセージングに関するものだからです。グループメッセージングには、より公的なグループに関連するいくつかのNIPがあります。それについて非常に簡単に説明します。これは最初の公開チャンネルのアイデアです。かなり単純で、非常にシンプルなクライアント管理チャンネルです。実際に行っていることは、アイテム、送信しているメモにタグを付けて、これがチャンネルの一部と見なされるべきものであると言うことです。ほとんどのクライアントは、これを自分のソーシャルフィードにも公開します。
これらのことを見ている人々にとっては非常に混乱を招くことがあります。しかし、興味のあるトピックを見つけ、そのトピックに関連するものを見たいと思ったときのアイデアを与えてくれます。これがその方法です。繰り返しになりますが、これは公のチャンネルであり、全くプライベートなものではなく、最初からそういう意図で作られたものではありません。また、実際のモデレーションもありません。グループのコンテンツは、ユーザー自身が見たいと思うものに基づいています。メッセージを隠したり、ユーザーを隠したり、チャンネル内のユーザーをミュートにしたりすることはできますが、それはあなた自身のフィードのためのものです。ですので、これらを公のチャンネルと考えるのではなく、プライマルやアメジストのフィードのセットのようなものとして考えるのが良いでしょう。

NIP29は、グループを作成するためにリレーに基づくアプローチを取っています。これは実際にかなり面白いです。ただし、かなり重要なトレードオフがあります。クローズドメンバーシップグループを作成する能力があり、誰がそのグループを読み書きできるかを指定することができます。また、グループのメンバーシップや設定を変更する権限を持つ人を指定することもできます。さらに、グループ内の会話は、イベントがすべてその内容を読むことができる人に対して存在するため、どのクライアントでも簡単に再構築できます。

私の考えでは、リレーに依存しているため、管理の多くがリレーに頼ることになります。これは、リレーが単純なサーバーで、クライアントがNostrよりも少し賢いという考えから外れ、リレーに多くの正直さを求めることになります。そして、もしリレーが正しいことをしなければ、このグループは突然、クローズドグループでもプライベートグループでもなくなってしまいます。また、これは本当にプライベートでも機密でもなく、リレーが本来アクセスすべきでない人々にイベントを提供しない限り、何も暗号化されているわけでも、機密性があるわけでもありません。NIP72は、Redditスタイルのモデレートコミュニティです。これに関しての実装はあまり多くないと思います。もし間違っていたら誰か訂正してください。

基本的に、Redditのようなものを作るというのがこのアイデアです。すべての人が見るコンテンツをモデレートする権限を持つモデレーターのセットを持つことです。これらは主に公のものであり、プライベートやセキュア、クローズドなものを作ろうとはしていません。

最後に話したいのは、これらのプライベートコミュニティです。これは未統合のNIPのようなもので、現時点ではあまり使われていないか、まだ実際の使用はありませんが、私はHuddlebotとこれについて話していました。これは興味深いアプローチを取っていると思います。これは、リレーに基づくアプローチを取りつつ、コミュニティのすべてのメンバーに秘密鍵を提供して、すべてを暗号化するというものです。これは単純な対称暗号であり、秘密鍵をグループのすべてのメンバーに渡し、そのメンバー全員がそれをうまく扱い、失わないことを期待しています。仕様には、時間の経過とともにその鍵をローテーションする能力もあります。ここには、ある程度の事後妥協のセキュリティがあります。
あなたは、漏洩したキーから回復することができるかもしれません。しかし、明らかに、キーはすべての人に渡す必要があり、それは、言ってみれば、単純すぎるという欠点があります。もう一つの問題は、このキーで暗号化しているため、過去のすべてのキーを保存していないと、コミュニティを再構築することができないということです。つまり、時間とともにこのキーを回転させているため、過去のトランスクリプトや会話にアクセスすることができません。これは、非常に大きなトレードオフの一つです。事後のセキュリティと前方の秘密を持つことは、ほぼ必然的に、リレーにあるイベントからチャットのトランスクリプトを再構築できないことを意味します。ですので、たとえば、アメジストを使用してからプライマルに移行した場合、同じコミュニティを開いて過去の履歴を得ることは、何らかの外部の同期メカニズムなしにはできません。

さて、ここが未来が進むことを期待している場所です。そして、明日、この仕様に関する技術的な詳細に関するトークを行う予定です。このことに少しでも興味がある方は、ぜひ私に話しかけてほしいです。私は人々に細かい詳細を説明することにとても喜んでいます。これにはトレードオフもありますが、私が考えているようにうまくいけば、基本的にテレグラムやシグナルのような主要なチャットクライアントを置き換えることができるようになるでしょう。つまり、Nostraリレー上で動作し、中央集権的なサーバーやコーディネーターを持たない何かを提案しているのです。

私が提案していることの利点は、基盤となるインターネットの新しい標準であるメッセージングレイヤーセキュリティを使用することです。これは、グループメンバーシップの非常に効率的なバイナリツリー構造を実現します。そして、そのバイナリツリーを使用して、グループの各メンバーがグループ全体のためにすべてを暗号化する方法を知るために十分な暗号的な状態を持つようにキー構造を設定します。また、グループの他の誰からでも何かを復号することができるようになります。

ありがたいことに、非常に優れたライブラリがあるため、NostraクライアントはMLSの細かい部分を扱う必要がありません。私たちはより高レベルなものを使用できるでしょう。しかし、MLSの本当に大きな利点は、大規模なグループ、特に非常に大きなグループをはるかに効率的にすることです。したがって、大規模なグループを管理し、コンテンツを暗号化するのがずっと簡単になります。

これは1対1のコミュニケーションも扱うことができ、理論的には上限はありません。100,000人以上のグループが存在するという文書も見たことがありますが、それもうまく機能しています。全く負担にはなりません。非常に強力な前方の秘密と事後のセキュリティを備えています。すべてのメッセージは異なるキーで暗号化され、全グループが持つ対称キーを使用しています。メッセージが届くたびに、ラチェットが動き、新しいキーが生成されます。したがって、すべての人が自分でこの暗号的な状態を前に進めており、皆が機械を持っていて、メッセージが到着するたびにこのラチェット動作を行っています。そして、それは完全に機密です。ここにはメタデータの漏洩は全くありません。
メッセージを送信するとき、あなたが所属するグループに対して送信するのは、単一のメッセージまたは単一のイベントです。これは一時的な鍵を用いてリレーに公開され、グループIDという大きなランダムな数字が含まれています。これらのグループIDは、時間とともに回転することができるため、グループの相対的な活発さに関して、さらに一段階の隠蔽を得ることができます。したがって、グループやダイレクトメッセージを非常に安全かつ極秘にするための多くの異なるアプローチがあります。この仕組みの欠点は、明らかにMLS（Messaging Layer Security）が非常に複雑であり、クライアントがこれを適切に実装するための非常に優れたツールが必要だということです。私はここ数ヶ月、そのために、OpenMLSライブラリのメンテナと協力して、このライブラリとそれが使用するいくつかの他の依存関係を更新する作業をしてきました。

また、前に言ったように、これは事後のセキュリティのトレードオフです。リレーにあるイベントから誰かとの会話を再構築することはできません。そのトランスクリプトを持っていなければならず、それを保存し、接続したい他のクライアントと何らかの方法で同期させなければなりません。これが、ダイレクトメッセージとグループメッセージのさまざまな部分の概要です。質問があれば、一般的なことから非常に具体的な技術的なことまで、何でもお答えしたいと思います。ありがとうございます。

さて、最後のポイントですが、デバイスを切り替えるとどうなるのでしょうか？あなたが言った最後のポイント、つまり以前のメッセージを再構築できないということが、私にはよく理解できませんでした。もう少し大きな声で言ってもらえますか？よく聞こえません。ごめんなさい、あなたが言った最後のポイント、私にはよく理解できませんでした。デバイスを切り替えた場合、メッセージを読むことができなくなるのですか？はい、そうです。こう考えてみてください。これはSignalやWhatsAppなどでも同様です。彼らはSignalプロトコルのバージョンを使用しています。簡単な歴史のレッスンをさせてください。メッセージングのためのプロトコルは数百種類存在してきました。2000年代後半に登場したプロトコルの一つに「Off the Record」というものがありました。これは最初の本格的なダブルラチェット暗号化システムで、2つの独立したラチェットがあり、2者が会話する際に鍵が変わるものでした。Signalを作った人たちはそれを取り入れ、さらにいくつかのステップを追加して、より多くの認証を行うようにしました。しかし、彼らはそのダブルラチェットメカニズムを維持しました。基本的に同じことを行い、状態を前進させ続けます。そしてMLSは、そのSignalプロトコルを一歩進めたものです。ダブルラチェットのシステムが同様に備わっています。これらすべてのシステムにおいて、グループのメンバーであるとき、それは単一のデバイスまたはクライアントに結びついています。あなたの電話とSignalは、あなたのラップトップとは異なるのです。
そして、あなたがラップトップと同期させるとき、実際に行っているのは、グループに第三のメンバーを追加することです。もしそれが、あなたともう一人の人間だった場合です。あなたの他のデバイス、つまり信号アプリは、その2つがあなたのものであることをうまく確認します。ですので、たとえ異なるデバイスでも、一人の人が話しているかのように表示されます。これがMLSが行っていることと全く同じです。会話にラップトップを追加したい場合は、ラップトップを招待することができます。アプリケーションは、全履歴があるように見せるために、何らかの暗号化されたトランスクリプトの同期を行うかどうかを決めることができます。しかし、プロトコル自体がそれを可能にするような仕様はありません。そして、もしこれらのデバイスの状態を失い、グループに再追加されなければならなくなった場合、あなたの状態は失われます。保存されている場合のみ状態は残ります。なぜなら、プロトコル自体がそれを扱っていないからです。

他に質問はありますか？あなたが今話していたことについて一つ質問があります。これは、クライアントプロバイダーに対して、生成された多くのキーを管理する責任がより重くなるということですね。これにより、クライアントプロバイダーが一層中央集権的になると見ていますか？人々がこれを使用するにつれて、すべてのキーをうまく管理してくれるクライアントを望むようになるからです。それとも、クライアントにとっては簡単にできることだと思いますか？はい、良い質問です。

これは、実際の深いMLSのために、本当に良いオープンスタンダードとオープンライブラリを持つことが非常に重要な理由だと思います。MLSの仕様は、今年の初めにインターネットの標準として認められました。それは、TLSがインターネットの標準であるのと同じように、あなたのブラウザのコードの中に深く埋め込まれていますが、すべての人が正しく機能させるためにまったく同じように実装しなければなりません。そのレベルで、すべての煩雑な部分を扱う良いライブラリがあれば、クライアントがあなたの言う高レベルなことを行うのはそれほど難しくはありません。キーの保存は常に問題ですが、あなたのウェブ上でのプライマルのように、電話上のドマスがあなたのインセクトをどのように保存しているかと同じように、こういった情報をより安全に保存するための方法はよく知られています。そして、通常、MLSライブラリには、ストレージプロバイダーへのプラグインが用意されています。

ストレージプロバイダーは、一種のホットスワップが可能です。ですので、言ったように、これを簡単にするために周囲に構築されるべきツールや小さなライブラリがたくさんあります。そして、これは私が思うに、私たちが今すぐに一つのクライアントでこれを行い、非常にうまく機能させることができるという部分です。しかし、すべてのクライアントがこれを簡単に行えるようにするためのツールを構築することが非常に重要だと思います。そして、それを行う方法が非常に負担にならない形で行うことが重要です。はい。
[1530.00 - 1535.24]  Nostr以外のアプリとの相互運用性について質問したかったのですが、もしそれが信号プロトコルに基づいているのなら、可能でしょうか？それがインターネットの標準であれば、
[1535.24 - 1540.62]  Nostrとは全く関係のないアプリと通信できるNostr DMクライアントを持つことはできるのでしょうか？はい、実際、これがMLSの最もクールな点の一つです。MLSは、キー構造を管理し、それを前進させる方法に関する仕様にすぎません。 
[1540.62 - 1546.34]  どのトランスポートメカニズムを使用してデータを送信するかについては概念がなく、実際に送信するメッセージの内容についても概念がありません。ですので、これらは他のシステムと合意しなければならない二つの点です。私が提案している方法では、全ての署名のないNostraイベントを取り出して、これらのMLSメッセージオブジェクトの中に入れ、それを送信します。そうすれば、クライアントは基本的にそれを解凍し、他のフィードと同じようにNostraイベントのプライベートスレッドに入れることができます。ただし、全て署名がないため、もしそれらが漏洩した場合、適切にリレーに公開することはできません。したがって、他のプロバイダーに合意してもらえれば、例えば「Nostraイベントを読むことができ、Nostraフィードを構築する方法を知っている。あなたはリレーに来てこの情報を取得するか、Nostraが他のどこかにもこれらのイベントを公開することを合意する」という形であれば、はい、全く相互運用可能です。
[1613.38 - 1617.30]  もう一つのことは、時間の経過とともにアップグレード可能であることです。特定のサイファースイートを使ってグループを作成し、数年後にポスト量子が必要になった場合、次のメッセージでクライアントを更新すれば、全員が新しいサイファースイートに切り替わり、続けることができます。なので、MLSにはこのような本当にクールな機能がたくさん組み込まれていて、今後も耐久性があり、時間の経過とともにアップグレード可能になることを期待しています。プレストン、もう一つ質問があります。はい、どうぞ。
[1643.54 - 1650.00]  こんにちは。ええと、
[1650.00 - 1679.98]  Signalの最悪な部分の一つは、メッセージをしばしば失うことです。私が働いている多くの人々もこの問題に悩まされていて、彼らは一緒に働いている他の全ての人々がSignalを使っていると言っているので、彼らはSignalを使い続けなければならないのです。Nostrに置き換えるのは一つのことですが、もし、あなたが言ったようにMLSがその部分を扱っていないので、古いメッセージのトランスクリプトをキャプチャし、
[1680.00 - 1684.24]  自分の電話から手動でコンピュータにインポートし、同じNosterキーで署名したり、何かで認証したりするようなレイヤー2のものを作成できれば、信号を殺すものになると思います。なぜなら、それがSignalが提供できない、またはまだ提供していないものを提供することになるからです。それは、単にNostrを接続する以上のことです。
[1696.88 - 1698.46]  そうですね。あなたがやっていることは素晴らしいです、ちなみに。
[1698.46 - 1702.12]  実際、これは非常に簡単に行えます。なぜなら、先ほど言ったように、私たちはNostrイベントのプライベートトランスクリプトを構築しているので、基本的に順序付けられたNostrイベントの配列を持つだけだからです。はい。
[1710.00 - 1715.30]  それを取って、その全体をパスワードで暗号化して、リレーにアップロードすることもできるよね？
[1715.30 - 1720.18]  もちろん、そこにはトレードオフがあって、もしパスワードやその暗号化の方法が破られたら、
[1720.60 - 1725.32]  全体の会話が失われてしまうことになる。
[1725.32 - 1730.54]  だから、これらのグループをどれだけ安全にしたいかというトレードオフがある。ねえ、君は、
[1730.96 - 1737.06]  その同期を長期的な潜在的なセキュリティよりもずっと重要視するのか？
[1737.06 - 1739.98]  うん、リレーにアップロードする代わりに、デバイス間でメッセージを送信できるなら、例えば、
[1740.00 - 1744.38]  自分のスマホとコンピュータを隣に置いて、ローカルでやり取りできるなら、私はそれが
[1744.38 - 1748.08]  シグナルをさらに素晴らしいものにすると思うので、それに言及したいと思ったし、君のやっていることに感謝している。
[1751.44 - 1756.14]  完全に同意するよ。私はそれが確実に実現可能だと思っているし、どうやってそれを実現するのが正しい方法か、
[1756.14 - 1760.26]  また、異なるデバイスの異なるクライアントがその同じファイルを受け取り、それに対して何をすべきかを理解できるような
[1760.26 - 1763.86]  インターロペラブルな方法がどのようなものかという質問だと思う。
[1763.86 - 1770.00]  他に誰かいる？
[1770.00 - 1772.24]  ここでジェフに大きな拍手を。
[1772.38 - 1772.98]  これは…
[1772.98 - 1773.54]  ありがとう、みんな。